# type: ignore
rule align:
    input:  
        config["data_path"]+"/unaligned/{sample}"
    output:
        "outputs/"+config["name"]+"/{tool}/alignments/{sample}"
    threads: config["align_threads"] if "align_threads" in config else 8
    resources:
        mem_mb = 64000, 
        gpu = 1,
        runtime = "1d",
        partition = config["gpu_partition"],
    log:
        "outputs/"+config["name"]+"/{tool}/logs/{sample}.log"
    benchmark:
        "outputs/"+config["name"]+"/{tool}/benchmarks/{sample}.txt"
    params:
        workdir="outputs/"+config["name"]+"/{tool}/workdirs/{sample}/",
        tree="outputs/"+config["name"]+"/{tool}/trees/{sample}/",
    run:
        tool_command=config["tools"][wildcards.tool]["command"]
        argstring = parse_cmd_args(config["tools"][wildcards.tool]["params"])

        cmd = (tool_command + " " + argstring).format(
            input=input, 
            output=output,
            threads=threads,
            workdir=params.workdir,
            tree=params.tree
        )

        print("Running command: ", cmd)

        if "mafft" in wildcards.tool:
            cmd += " > {output}".format(output=output[0])

        p = subprocess.Popen(
            cmd, 
            shell = True, 
            stdout = subprocess.PIPE, 
            stderr= subprocess.PIPE
        )
        stdout, stderr= p.communicate()

        print(stderr.decode(), file=sys.stderr)

        if (os.path.exists(output[0]) 
            and p.returncode == 0
            and not os.path.getsize(output[0]) == 0):
            # everything is ok
           with open(log[0], "w") as log_file:
                print(stdout.decode(), file=log_file)
        else:
            # something went wrong
            # create the output file to make subsequent rules still run,
            # but make clear that the output file is invalid
            with open(output[0], "w") as fout:
                fout.write("FAILED")


def parse_cmd_args(params):
    """
    Converts a dictionary to a string of command-line arguments.

    Args:
        params (dict): Dictionary of parameters.

    Returns:
        str: Command-line arguments as a string.
    """
    return " ".join(params)