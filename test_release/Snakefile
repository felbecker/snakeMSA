data = "../data"
SAMPLES, = glob_wildcards(data+"/homfam/train/{sample}")
DIRS = ["homfam"]*len(SAMPLES)
TOOLS = ["learnMSA"]

#compute one output table per tool
rule all:
    input:
        expand("results/{tool}.out", tool=TOOLS)
        
rule learnMSA:
    input:  
         data+"/{dir}/train/{sample}"
    output:
        "outputs/learnMSA/alignments/{dir}/{sample}"
    threads: 4
    resources:
        mem_mb = 50000, 
        gpu = 1,
        runtime = "10h",
        learnMSA_load = 1,
        partition = "vision"
    log:
        "outputs/learnMSA/logs/{dir}/{sample}.log"
    benchmark:
        "outputs/learnMSA/benchmarks/{dir}/{sample}.txt"
    params:
        slice_dir="outputs/learnMSA/slices/{dir}/{sample}",
        cluster_dir="outputs/learnMSA/clustering/{dir}"
    shell:
        "python3 ../../learnMSA/learnMSA.py -i {input} -o {output} "
        "--use_language_model --sequence_weights --cluster_dir {params.cluster_dir} > {log}"
        
        
## Derive the sub-MSA of the reference sequences from the full MSA
rule project_references:
    input:
        msa = "outputs/{tool}/alignments/{dir}/{sample}",
        ref = data+"/{dir}/refs/{sample}"
    output:
        "outputs/{tool}/projections/{dir}/{sample}"
    threads: 32
    resources:
        #some aligners might produce extremely large fasta files
        #this allocates a huge chunk of memory, but the jobs are short
        mem_mb = 500000,
        partition = "pinky",
        runtime = "24h"
    run:
        exit_status = open(input.msa).readline().strip()
        if exit_status == "FAILED":
            # pass failed samples through
             with open(output[0], "w") as fout:
                fout.write("FAILED")
        else:
            shell("""id_list=$(sed -n '/^>/p' {input.ref} | sed 's/^.//') ; \
                    export MAX_N_PID_4_TCOFFEE=10000000 ; \
                    t_coffee -other_pg seq_reformat -in {input.msa} -action +extract_seq_list ${{id_list[@]}} +rm_gap \
                    > {output}""")
        
       
## Compute a number of some general statistics and scoring metrics and store them in per-sample files
rule score_msa:
    input:
        msa = "outputs/{tool}/projections/{dir}/{sample}",
        ref = data+"/{dir}/refs/{sample}",
        all = data+"/{dir}/train/{sample}"
    output:
        "outputs/{tool}/scores/{dir}/{sample}"
    threads: 8
    resources:
        mem_mb = 16000,
        partition = "pinky"
    run:
        exit_status = open(input.msa).readline().strip()
        if exit_status == "FAILED":
            # insert a score of 0 for failed files
            shell("""nseq=$(grep -c '>' {input.all}) ; \
                    avg_len=$(awk '{{/>/&&++a||b+=length()}}END{{print b/a}}' {input.all}) ;\
                    avg_ref_len=$(awk '{{/>/&&++a||b+=length()}}END{{print b/a}}' {input.ref}) ;\
                    echo {wildcards.dir} {wildcards.sample} $nseq 0 $avg_len $avg_ref_len 0 0 0 0 0 >> {output}""")
        else:
            shell("""nseq=$(grep -c '>' {input.all}) ; \
                    avg_len=$(awk '{{/>/&&++a||b+=length()}}END{{print b/a}}' {input.all}) ;\
                    avg_ref_len=$(awk '{{/>/&&++a||b+=length()}}END{{print b/a}}' {input.ref}) ;\
                    export MAX_N_PID_4_TCOFFEE=10000000 ; \
                    sp_out=$(t_coffee -other_pg aln_compare -al1 {input.ref} -al2 {input.msa} -compare_mode sp | \
                    grep -v 'seq1' | grep -v '*') ; \
                    nseq_ref=$(echo $sp_out | awk '{{ print $2}}') ; \
                    sim=$(echo $sp_out | awk '{{ print $3}}') ; \
                    sp=$(echo $sp_out | awk '{{ print $4}}') ; \
                    modeler=$(t_coffee -other_pg aln_compare -al1 {input.msa}  -al2 {input.ref} -compare_mode sp | \
                    grep -v 'seq1' | grep -v '*' | awk '{{ print $4}}') ; \
                    tc=$(t_coffee -other_pg aln_compare -al1 {input.ref} -al2 {input.msa} -compare_mode tc | \
                    grep -v 'seq1' | grep -v '*' | awk '{{ print $4}}') ; \
                    col=$(t_coffee -other_pg aln_compare -al1 {input.ref} -al2 {input.msa} -compare_mode column | \
                    grep -v 'seq1' | grep -v '*' | awk '{{ print $4}}') ; \
                    echo {wildcards.dir} {wildcards.sample} $nseq $nseq_ref $avg_len $avg_ref_len $sim $sp $modeler $tc $col >> {output}""")
        
        
rule concat_scores:
    input:
        scores = expand("outputs/{{tool}}/scores/{dir}/{sample}", zip, dir=DIRS, sample=SAMPLES),
        benchmarks = expand("outputs/{{tool}}/benchmarks/{dir}/{sample}.txt", zip, dir=DIRS, sample=SAMPLES)
    output:
        "results/{tool}.out"
    threads: 1
    resources:
        mem_mb = 1000,
        partition = "pinky"
    run:
        shell("echo -n "" > {output}")
        for s,b in zip(input.scores, input.benchmarks):
            #row by row for each sample, concatenate the scores and the second line of the benchmark file
            shell("echo $(cat {s}) $(tail -n 1 {b}) >> {output}")
